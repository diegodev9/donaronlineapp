require 'rails_helper'
require 'devise/jwt/test_helpers'
require 'support/devise_for_request'
require 'support/database_cleaner'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/donations", type: :request do
  let(:headers) { { 'Accept' => 'application/json', 'Content-Type' => 'application/json' } }
  let(:new_user) { create(:user, level: 1) }
  let(:authorization_headers) { Devise::JWT::TestHelpers.auth_headers(headers, new_user) }
  let(:new_donor) { build(:donor) }
  let(:new_donation) { build(:donation) }

  before do
    new_donation.save
  end

  describe "GET /index" do
    it "renders a successful response" do
      get donations_url, headers: authorization_headers, as: :json
      expect(response).to be_successful
    end
  end

  describe "GET /show" do
    it "renders a successful response" do
      get donation_url(new_donation), headers: authorization_headers, as: :json
      expect(response).to be_successful
    end
  end

  describe "POST /create", skip_before: true do
    context "with valid parameters" do
      it "creates a new Donation" do
        expect do
          post donations_url,
               params: { donor: new_donor, donation: new_donation, card: { expire_date: '06/2024' } }, as: :json
        end.to change(Donation, :count).by(1)
      end

      it "renders a JSON response with the new donation" do
        post donations_url,
             params: { donor: FactoryBot.create(:donor), donation: new_donation, card: { expire_date: '06/2024' } }, as: :json
        expect(response).to have_http_status(:created)
        expect(response.content_type).to match(a_string_including("application/json"))
      end
    end

    context "with invalid parameters" do
      it "does not create a new Donation" do
        expect do
          post donations_url,
               params: { donor: FactoryBot.create(:donor), donation: new_donation, card: { expire_date: '06/2023' } }, as: :json
        end.to change(Donation, :count).by(0)
      end

      it "renders a JSON response with errors for the new donation" do
        post donations_url,
             params: { donor: FactoryBot.create(:donor), donation: new_donation, card: { expire_date: '06/2023' } }, headers: authorization_headers, as: :json
        expect(response).to have_http_status(:unprocessable_entity)
        expect(response.content_type).to match(a_string_including("application/json"))
      end
    end
  end

  describe "PATCH /update" do
    context "with valid parameters" do
      new_attributes = { amount: 10.0 }

      it "updates the requested donation" do
        patch donation_url(new_donation),
              params: { donation: new_attributes }, headers: authorization_headers, as: :json
        new_donation.reload
        expect(new_donation.amount).to eq(new_attributes[:amount])
      end

      it "renders a JSON response with the donation" do
        patch donation_url(new_donation),
              params: { donation: new_attributes }, headers: authorization_headers, as: :json
        expect(response).to have_http_status(:ok)
        expect(response.content_type).to match(a_string_including("application/json"))
      end
    end

    context "with invalid parameters" do
      invalid_attributes = { amount: "texto demo" }

      it "renders a JSON response with errors for the donation" do
        patch donation_url(new_donation),
              params: { donation: invalid_attributes }, headers: authorization_headers, as: :json
        expect(response).to have_http_status(:unprocessable_entity)
        expect(response.content_type).to match(a_string_including("application/json"))
      end
    end
  end

  describe "DELETE /destroy" do
    it "destroys the requested donation" do
      expect do
        delete donation_url(new_donation), headers: authorization_headers, as: :json
      end.to change(Donation, :count).by(-1)
    end
  end

  describe "GET /list_donations" do
    context 'with params' do
      from_ = '10/07/2023'
      to_ = '20/07/2023'
      params_from = from_.to_datetime.beginning_of_day.utc
      params_to = to_.to_datetime.end_of_day.utc

      it 'lists donations in given date' do
        donations = Donation.where(created_at: [params_from..params_to]).count
        get list_donations_url, params: { "from": '10/07/2023', "to": '20/07/2023' },
                                headers: authorization_headers
        res = JSON.parse(response.body, symbolize_names: true)
        expect(res).to include('donations count': donations)
      end
    end

    context 'without params' do
      it 'lists all donations' do
        get list_donations_url, headers: authorization_headers, as: :json
        expect(response.body).to include(new_donation.card_number)
      end
    end
  end
end
