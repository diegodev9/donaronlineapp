require 'rails_helper'
require 'devise/jwt/test_helpers'
require 'support/devise_for_request'
require 'support/database_cleaner'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/donors", type: :request do
  let(:headers) { { 'Accept' => 'application/json', 'Content-Type' => 'application/json' } }
  let(:new_user) { create(:user, level: 1) }
  let(:authorization_headers) { Devise::JWT::TestHelpers.auth_headers(headers, new_user) }
  let(:new_donor) { build(:donor) }

  before do
    new_donor.save
  end

  describe "GET /index" do
    it "renders a successful response" do
      new_donor.save
      get donors_url, headers: authorization_headers, as: :json
      expect(response).to be_successful
    end
  end

  describe "GET /show" do
    it "renders a successful response" do
      new_donor.save
      get donor_url(new_donor), headers: authorization_headers, as: :json
      expect(response).to be_successful
    end
  end

  describe "POST /create", skip_before: true do
    context "with valid parameters" do
      it "creates a new Donor" do
        expect do
          post donors_url,
               params: { donor: new_donor }, headers: authorization_headers, as: :json
        end.to change(Donor, :count).by(1)
      end

      it "renders a JSON response with the new donor" do
        post donors_url,
             params: { donor: new_donor }, headers: authorization_headers, as: :json
        expect(response).to have_http_status(:created)
        expect(response.content_type).to match(a_string_including("application/json"))
      end
    end

    context "with invalid parameters" do
      it "does not create a new Donor" do
        expect do
          post donors_url,
               params: { donor: new_donor }, as: :json
        end.to change(Donor, :count).by(0)
      end

      it "renders a JSON response with errors for the new donor" do
        post donors_url,
             params: { donor: new_donor }, headers: nil, as: :json
        expect(response).to have_http_status(:unauthorized)
        expect(response.content_type).to match(a_string_including("application/json"))
      end
    end
  end

  describe "PATCH /update" do
    context "with valid parameters" do
      new_attributes = { lastname: Faker::Name.last_name }

      it "updates the requested donor" do
        patch donor_url(new_donor),
              params: { donor: new_attributes }, headers: authorization_headers, as: :json
        new_donor.reload
        expect(new_donor.lastname).to eq(new_attributes[:lastname])
      end

      it "renders a JSON response with the donor" do
        patch donor_url(new_donor),
              params: { donor: new_attributes }, headers: authorization_headers, as: :json
        expect(response).to have_http_status(:ok)
        expect(response.content_type).to match(a_string_including("application/json"))
      end
    end

    context "with invalid parameters" do
      invalid_attributes = { email: '' }

      it "renders a JSON response with errors for the donor" do
        patch donor_url(new_donor),
              params: { donor: invalid_attributes }, headers: authorization_headers, as: :json
        expect(response).to have_http_status(:unprocessable_entity)
        expect(response.content_type).to match(a_string_including("application/json"))
      end
    end
  end

  describe "DELETE /destroy" do
    it "destroys the requested donor" do
      expect do
        delete donor_url(new_donor), headers: authorization_headers, as: :json
      end.to change(Donor, :count).by(-1)
    end
  end
end
